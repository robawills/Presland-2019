<!-- Custom form created using the Sprout Forms form builder plugin - https://sprout.barrelstrengthdesign.com/craft-plugins/forms -->

{% do craft.sproutForms.addFieldVariables({
    'craft': craft,
    'now': now,
    'currentSite': currentSite,
    'currentUser': currentUser,
    'siteName': siteName,
    'siteUrl': siteUrl,
    'systemName': systemName
}) -%}
{%- set renderingOptions = renderingOptions is defined and renderingOptions is not empty ? renderingOptions : {} -%}
{%- set errors      = entry.getErrors()|length ? entry.getErrors() : false -%}
{%- set errorClass  = renderingOptions.errorClass is defined ? renderingOptions.errorClass : 'errors' -%}
{%- set id          = renderingOptions.id is defined ? renderingOptions.id : form.handle ~ '-form' -%}
{%- set class       = renderingOptions.class is defined ? renderingOptions.class : form.handle ~ '-form' -%}
{%- set redirectUri = form.redirectUri -%}

<form method="post" accept-charset="utf-8" enctype="multipart/form-data"
    {%- if id %} id="{{ id }}"{% endif -%}
    {%- if class %} class="{{ class -}}{%- if errors %} {{ errorClass }}{% endif -%}"{% endif -%}
>
    {{ csrfInput() }}
    <input type="hidden" aria-hidden="true" name="action"
           value="sprout-forms/entries/save-entry">
    <input type="hidden" aria-hidden="true" name="handle"
           value="{{ form.handle }}">
    {%- if redirectUri is not empty %}
        {% if redirectUri|slice(0, 1)|lower == '?' %}
            {%- set redirectUri = craft.app.request.getUrl()~redirectUri %}
        {% endif %}

        <input type="hidden" aria-hidden="true" name="redirect"
               value="{{ redirectUri|hash }}">
    {% endif %}

    <div class="fields">
        {%- for tab in form.getFieldLayout().getTabs() %}
            {{ craft.sproutForms.displayTab(form, tab.id, renderingOptions) }}
        {% endfor -%}
    </div>

    {% hook 'sproutForms.modifyForm' %}

    <div class="submit">
        <button type="submit">{{ form.submitButtonText is not empty ? form.submitButtonText : 'Submit'|t('site') }}</button>
    </div>
</form>

{# Add focus to the first field which has an error #}
{% if errors -%}
    {%- for labelId, error in errors %}
        {%- if loop.first %}
            <script>
                (function() {
                    var field = document.getElementById('fields-' + '{{ labelId }}');
                    if (field) {
                        field.focus();
                    }
                })();
            </script>
        {%- endif %}
    {%- endfor %}
{%- endif %}

<script>

    (function() {

        var SproutForms = SproutForms || {};
        SproutForms.CheckableInputs = SproutForms.CheckableInputs || {};
        SproutForms.AddressFields = SproutForms.AddressFields || {};

        // Manage aria-checked values on Checkbox and Radio Button inputs
        SproutForms.CheckableInputs = {

            formId: null,
            form: null,
            checkableInputs: null,

            init: function(id) {
                this.formId = id;
                this.form = document.getElementById(this.formId);
                this.checkableInputs = this.form.querySelectorAll('[type=checkbox], [type=radio]');

                this.setAriaCheckedAttributes();
                this.addCheckableInputsEventListeners();
            },

            setAriaCheckedAttributes: function() {
                for (var i = 0; i < this.checkableInputs.length; i += 1) {
                    if (this.checkableInputs[i].checked) {
                        this.checkableInputs[i].setAttribute("aria-checked", true);
                    }
                }
            },

            addCheckableInputsEventListeners: function() {
                for (var i = 0; i < this.checkableInputs.length; i += 1) {
                    this.checkableInputs[i].addEventListener("click", function(event) {
                        this.onCheckableInputChange(event);
                    }.bind(this), false);
                }
            },

            onCheckableInputChange: function(event) {

                if (event.target.checked) {

                    // Resets all buttons in radio group to false
                    if (event.target.getAttribute("type") === "radio") {
                        this.resetRadioGroup(event.target);
                    }

                    event.target.setAttribute("aria-checked", true);
                } else {
                    event.target.setAttribute("aria-checked", false);
                }
            },

            resetRadioGroup: function(selectedRadioInput) {

                var radioInputName = selectedRadioInput.getAttribute("name");

                console.log(radioInputName);
                var allRadioInputs = document.querySelectorAll('#' + this.formId + ' [name="' + radioInputName + '"] ');
                console.log(allRadioInputs);
                for (var i = 0; i < allRadioInputs.length; i += 1) {
                    allRadioInputs[i].setAttribute("aria-checked", false);
                }
            }

        };

        SproutForms.CheckableInputs.init('{{ id }}');

        SproutForms.AddressFields = {

            formId: null,
            addressFields: null,
            countrySelectFields: null,
            namespace: null,

            init: function(id) {
                this.formId = id;
                this.form = document.getElementById(this.formId);
                this.addressFields = document.querySelectorAll('.sproutfields-address-formfields');
                this.countrySelectFields = document.querySelectorAll('.sprout-address-country-select');

                this.getNamespace();
                this.initCountrySelectFields();
            },
            getNamespace: function() {
                if (this.addressFields.length) {
                    this.namespace = this.addressFields[0].dataset.namespace;
                }
            },
            initCountrySelectFields: function() {
                self = this;
                for (var i = 0; i < this.countrySelectFields.length; i++) {
                    this.countrySelectFields[i].addEventListener('change', function(event) {
                        self.updateFormFields(this);
                    });
                }
            },
            updateFormFields: function(el) {
                self = this;
                var oForm = el.closest('form');
                var csrfValue = oForm.elements["{{ craft.app.getConfig().getGeneral().csrfTokenName }}"].value;
                var data = {
                    namespace: this.namespace,
                    countryCode: el.value,
                    overrideTemplatePaths: true
                };
                var params = typeof data == 'string' ? data : Object.keys(data).map(
                    function(k) {
                        return encodeURIComponent(k) + '=' + encodeURIComponent(data[k])
                    }
                ).join('&');

                var http = new XMLHttpRequest();

                http.open('POST', '{{ actionUrl('sprout-base-fields/fields-address/update-address-form-html') }}', true);
                http.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                http.onreadystatechange = function() {

                    //Call a function when the state changes.
                    if (http.readyState === 4 && http.status === 200) {

                        self.removeElements('.sprout-address-onchange-country', oForm);
                        var response = JSON.parse(http.response);
                        var countrySpecificFields = oForm.querySelector('.sprout-address-country-fields');

                        countrySpecificFields.innerHTML = response.html;
                    }
                };

                http.setRequestHeader('X-CSRF-Token', csrfValue);
                http.setRequestHeader('Accept', 'application/json; charset=utf-8');
                http.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');

                http.send(params);
            },

            removeElements: function(classes, oForm) {
                var inputs = oForm.querySelectorAll(classes);

                for (var key in inputs) {
                    var elem = inputs[key];

                    if (typeof elem.parentNode !== 'undefined') {
                        elem.parentNode.removeChild(elem);
                    }
                }
            }
        };

        SproutForms.AddressFields.init('{{ id }}');

    })();

</script>

<!-- / Sprout Forms Craft CMS form builder plugin -->
